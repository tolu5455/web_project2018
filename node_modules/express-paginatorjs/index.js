'use strict';

let paginator = (paginator, options) => {

    /**
     * 
     *  The paginator helper is to make the use of a pagination easy and
     *  smooth without client-side painting.
     * 
     */

    // Only process the paginator if there exist more than one page.
    if (paginator.totalPages > 1) {
        // Declare variables
        let newContext = {},
            // Options and Settings
            type = (options.hash.type) ? options.hash.type : 'full',
            limitSet = (options.hash.limit) ? options.hash.limit : paginator.limit,
            limit = Number.parseInt(limitSet),
            totalPages = Number.parseInt(paginator.totalPages),
            currentPage = (!isNaN(paginator.currentPage)) ? Number.parseInt(paginator.currentPage) : 1,
            uriPath = (!isNaN(paginator.currentPage)) ? Number.parseInt(paginator.currentPage) : null,
            uriPath = (!isNaN(paginator.uriPath)) ? paginator.uriPath : null,
            defaultPage = (paginator.defaultPage) ? paginator.defaultPage : 'posts',
            // Misc.
            leftCount = Math.ceil(limit / 2) - 1,
            rightCount = limit - leftCount - 1,
            start = '',
            stop = '',
            ret = '',
            active = '',
            href = '';
            

        /**
         * Thresholds/States
         */
        
        // Setting thresholds. Variables are only to give clarity.
        let firstState = (currentPage - leftCount < 1) ? true : false;
        let lastState = (currentPage + rightCount > totalPages) ? true : false;

        // If the first threshold or middle state is reached.
        if (firstState) { start = 1; stop = start + limit;} 
        else { start = currentPage - leftCount; stop = start + limit;}

        // If the last threshold has been reached.
        if (lastState) { start = totalPages - limit + 1; stop = totalPages + 1;}

        if (type === 'links') {
            
            // If the uriPath is a number
            if (uriPath != null ) {
                for (let i = start; i < stop; i++) {
                    newContext.href = i;
                    newContext.n = i;
                    newContext.active = (i === currentPage) ? true : false;
                    ret += options.fn(newContext);
                }
            }
            else {
                for (let i = start; i < stop; i++) {
                    newContext.href = defaultPage + '/' + i;
                    newContext.n = i;
                    newContext.active = (i === currentPage) ? true : false;
                    ret += options.fn(newContext);
                }
            }
            return ret;
        }

        if (type === 'prev' && currentPage > 1) {
            newContext.prev = currentPage - 1;
            ret = options.fn(newContext);
            return ret;
        }

        if (type === 'next' && currentPage < totalPages) {
            newContext.next = (uriPath != null) ? currentPage + 1 : defaultPage + '/' + (currentPage + 1);
            ret = options.fn(newContext);
            return ret;
        }

        if (type === 'full') {
            ret = '<nav aria-label="Page navigation"><ul class="pagination">';

            if (currentPage > 1)
                ret += '<li class="page-item"><a class="page-link" href="' + (currentPage - 1 ) + '">Previous</a></li>';

            for (let i = start; i < stop; i++) {
                href = (uriPath != null) ? i : defaultPage + '/' + i;
                active = (i === currentPage) ? 'active' : '';
                ret += '<li class="page-item ' + active + '"><a class="page-link" href="' + href + '">' + i + '</a></li>';
            }

            if (currentPage < totalPages) {
                href = (uriPath != null) ? currentPage + 1 : defaultPage + '/' + (currentPage + 1);
                ret += '<li class="page-item"><a class="page-link" href="' + href + '">Next</a></li>';
            }
            
            return ret + '</ul></nav>';
        }
    }
}

module.exports = paginator;
